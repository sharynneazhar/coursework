/**
*	@file : SortDriver.cpp
*	@author : Sharynne Azhar
*	@date : 04-11-2016
*	@brief: Implementation file for SortDriver class
*/

#include "SortDriver.h"

void SortDriver::run(int argc, char** argv) {
    int size = std::atoi(argv[1]);  // size of the array to be used by ArrayGenerator
    std::string order = argv[2]; // initial order of data to be generated by ArrayGenerator
    std::string sort = argv[3]; // type of sorting algorithm to be implemented

    // check parameters
    if (!areParametersValid(order, sort)) {
        std::cerr << "\nERROR: Invalid flag or parameter\n";
        printHelpMenu();
        return;
    }

    std::cout << "\nStarting...\n"
              << "This might take a while for some sorts...\n"
              << "So, sit back and wait until it's done!\n\n";

    // create the array
    double* sortArr = createArray(order, size);

    // variables used to calculate the execution times
    double totalTime = 0.0;
    totalTime = doSort(sortArr, sort, size);

    // print to console
    printResults(size, sort, order, totalTime);

    delete [] sortArr;
    sortArr = nullptr;
}

void SortDriver::runAnalysis(int argc, char** argv) {
    std::string mode = argv[1];
    int size = std::atoi(argv[2]);
    std::string order = argv[3];
    std::string sort = argv[4];

    // check parameters
    if ((mode.compare("-a") != 0) && (!areParametersValid(order, sort))) {
        std::cerr << "\nERROR: Invalid flag or parameter\n";
        printHelpMenu();
        return;
    }

    std::cout << "\nStarting ANALYSIS mode...\n"
              << "This runs the sorting algorithm 5 times and\n"
              << "writes the average time taken to a file.\n"
              << "It might take a while for some sorts...\n"
              << "So, sit back and wait until it's done!\n\n";

    // create a spreadsheet for results
    ofstream sortResults;
    std::string filename = sort + "_" + order + ".csv";
    sortResults.open("results/" + filename, std::ios_base::app);

    // for better accuracy, average of the total times of 5 trials
    double sumOfTotalTime = 0.0;
    double averageTime = 0.0;

    double* arr1 = createArray(order, size);
    double* arr2 = createArray(order, size);
    double* arr3 = createArray(order, size);
    double* arr4 = createArray(order, size);
    double* arr5 = createArray(order, size);

    double time1 = doSort(arr1, sort, size);
    double time2 = doSort(arr2, sort, size);
    double time3 = doSort(arr3, sort, size);
    double time4 = doSort(arr4, sort, size);
    double time5 = doSort(arr5, sort, size);

    std::cout << time1 << " " << time2 << " " << time3 << " " << time4 << " " << time5 << "\n";
    sumOfTotalTime = time1 + time2 + time3 + time4 + time5;

    delete [] arr1;
    arr1 = nullptr;

    delete [] arr2;
    arr2 = nullptr;

    delete [] arr3;
    arr3 = nullptr;

    delete [] arr4;
    arr4 = nullptr;

    delete [] arr5;
    arr5 = nullptr;

    // get the average of times and add to spreadsheet
    averageTime = sumOfTotalTime / 5;
    sortResults << size << "," << averageTime << std::endl;

    // print to console
    printResults(size, sort, order, averageTime);

    sortResults.close();
}

double SortDriver::doSort(double* arr, std::string sortName, int size) {
    clock_t startTime, endTime;
    double sortTicks = 0.0;

    if (sortName.compare("selection") == 0) {
        startTime = clock();
        selectionSort(arr, size);
        endTime = clock();
    }

    if (sortName.compare("insertion") == 0) {
        startTime = clock();
        insertionSort(arr, size);
        endTime = clock();
    }

    if (sortName.compare("bubble") == 0) {
        startTime = clock();
        bubbleSort(arr, size);
        endTime = clock();
    }

    if (sortName.compare("merge") == 0) {
        startTime = clock();
        mergeSort(arr, size);
        endTime = clock();
    }

    if (sortName.compare("quick") == 0) {
        startTime = clock();
        quickSort(arr, 0, size - 1);
        endTime = clock();
    }

    // calculate time
    sortTicks = endTime - startTime;
    return sortTicks / CLOCKS_PER_SEC;
}

double* SortDriver::createArray(std::string orderType, int size) {
    double* arr = new double[size];

    if (orderType.compare("ascending") == 0) {
        ArrayGenerator::ascending(arr, size);
    }

    if (orderType.compare("descending") == 0) {
        ArrayGenerator::descending(arr,size);
    }

    if (orderType.compare("random") == 0) {
        ArrayGenerator::random(arr,size);
    }

    return arr;
}

void SortDriver::printArray(double* arr, int size) {
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
}

bool SortDriver::areParametersValid(std::string orderParameter, std::string sortParameter) {
    return isOrderParameterValid(orderParameter) && isSortParameterValid(sortParameter);
}

bool SortDriver::isSortParameterValid(std::string sortParameter) {
    if (sortParameter.compare("selection") == 0) {
        return true;
    }

    if (sortParameter.compare("insertion") == 0) {
        return true;
    }

    if (sortParameter.compare("bubble") == 0) {
        return true;
    }

    if (sortParameter.compare("merge") == 0) {
        return true;
    }

    if (sortParameter.compare("quick") == 0) {
        return true;
    }

    return false;
}

bool SortDriver::isOrderParameterValid(std::string orderParameter) {
    if (orderParameter.compare("ascending") == 0) {
        return true;
    }

    if (orderParameter.compare("descending") == 0) {
        return true;
    }

    if (orderParameter.compare("random") == 0) {
        return true;
    }

    return false;
}

void SortDriver::printResults(int size, std::string sortName, std::string orderName, double timeTaken) {
    std::cout << "\n======================================"
              << "\nResults"
              << "\n======================================"
              << "\nSize: " << size
              << "\nSorting Algorithm: " << sortName
              << "\nInitial Order: " << orderName
              << "\nSorting Time: " << timeTaken << " seconds"
              << "\n======================================\n\n";
}


void SortDriver::printHelpMenu()
{
    std::cout << "\nThe program requires input in the following way:\n"
              << "    <prog_name> ::= <flag>? <data_size> <order_of_data> <sort_type>\n\n"
              << "Details:\n"
              << "    <flag> optional \"-a\" flag to run analysis mode (averages 5 runs)\n"
              << "    <data_size> the size of the array to be generated and sorted\n"
              << "    <order_of_data> the initial order of data\n"
              << "\trandom | ascending | descending\n"
              << "    <sort_type> the algorithm to be used to perform the sort\n"
              << "\tselection | insertion | bubble | merge | quick\n\n";
}
